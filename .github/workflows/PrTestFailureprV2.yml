name: PR Test Failure Reporter

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

permissions:
  pull-requests: write

jobs:
  test-and-report:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
          
      # Återställ beroenden
      - name: Restore dependencies
        run: |
          dotnet restore KraftKollen/KraftKollen.Tests/KraftKollen.Tests.csproj

      # Debug: Lista filer i katalogen för att verifiera existens
      - name: List files in the directory
        run: |
          ls -R KraftKollen/KraftKollen.Tests/

      # Kör tester och generera xUnit resultat
      - name: Run Tests and Generate xUnit Results
        id: run-tests
        run: |
          mkdir -p test_results
          dotnet test KraftKollen/KraftKollen.Tests/KraftKollen.Tests.csproj --logger "xunit;LogFileName=test_results/results.xml" --verbosity detailed
          # Kontrollera om results.xml skapades
          ls -lh test_results/results.xml

      # Kontrollera storleken på testresultatfilen
      - name: Check test result file size
        run: |
          ls -lh test_results/results.xml
          if [ ! -s test_results/results.xml ]; then
            echo "Test result file is empty or does not exist!" && exit 1
          else
            echo "Test result file is valid and not empty."
          fi

      # Extrahera testfel (om det finns några)
      - name: Extract Test Failures
        if: failure()
        id: extract-failures
        run: |
          echo "Extracting test failures..."
          if [ -f test_results/results.xml ]; then
            grep -oP '<failure message=.*?>.*?</failure>' test_results/results.xml > test_results/failures_summary.txt || echo "No failures found"
          else
            echo "Results file not found."
          fi

      # Kontrollera om vi har extraherat några fel
      - name: Check if failures were extracted
        run: |
          if [ -f test_results/failures_summary.txt ]; then
            echo "Test failures extracted successfully."
            cat test_results/failures_summary.txt
          else
            echo "No test failures found."
          fi

      # Format för kommentar om testfel
      - name: Format Test Failures for Comment
        if: failure() && fileExists('test_results/failures_summary.txt')
        run: |
          echo "### ❌ Test Failures Summary" > comment.md
          echo "#### Below are the failed tests:" >> comment.md
          while read -r line; do
            message=$(echo "$line" | sed -E 's/<failure message="(.*?)">.*/\1/')
            echo "- $message" >> comment.md
          done < test_results/failures_summary.txt
          echo "For full details, check the [workflow logs](${{ github.run_url }})." >> comment.md

      # Sätt kommentarens innehåll som en miljövariabel (endast om kommentar.md finns)
      - name: Set Comment Content as Environment Variable
        if: failure() && fileExists('comment.md')
        run: |
          comment=$(cat comment.md)
          echo "comment<<EOF" >> $GITHUB_ENV
          echo "$comment" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Kommentera på PR (endast om kommentar.md har skapats)
      - name: comment-on-pr
        if: failure() && fileExists('comment.md')
        uses: thollander/actions-comment-pull-request@v1
        with:
              message: "${{ env.comment }}"
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Kontrollera om en fil finns
      - name: fileExists
        run: |
          if [ -f "comment.md" ]; then
            echo "File comment.md exists."
          else
            echo "File comment.md does not exist."
          fi


