name: PR Test Failure Reporter

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

jobs:
  test-and-report:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
          
      - name: Run Tests and Generate xUnit Results
        id: run-tests
        run: |
          mkdir -p test_results
          # Run tests and capture both standard output and errors into a log file
          dotnet test KraftKollen/KraftKollen.Tests/KraftKollen.Tests.csproj --logger "xunit;LogFileName=test_results/results.xml" > test_results/test_log.txt 2>&1
        continue-on-error: true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test_results
 
  add-comment-to-pr:
    runs-on: ubuntu-latest
    needs: test-and-report
    permissions:
      pull-requests: write  # Grant permission to write comments to pull requests
      contents: read        # Grant permission to read the repository's contents (if required)

    
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: test-results

      - name: List Artifact Contents
        run: |
          echo "Listing contents of the current directory:"
          ls -alh  # List contents of the current directory to see if test_results is there

      - name: View Contents of test_log.txt
        run: |
          echo "Displaying contents of test_log.txt:"
          cat test_log.txt  # Replace with the actual path to your txt file in the artifact

    
      - name: Extract and Format Test Failures
        id: format-comment
        run: |
          echo "Extracting test failures..."
          
          # Initialize an empty string to store formatted failures
          formatted_comment="### ‚ùå Test Failures Summary\n"

          # Extract failures and format them into a more readable format
          grep -P '^\[xUnit.net.*FAIL\]' test_log.txt || echo "No failures found" # Debugging line

          # Extract failures and format them into a more readable format
          grep -P '^\[xUnit.net.*FAIL\]' test_log.txt | while read -r line; do
            echo "Matched line: $line"  # Debugging line
            # Extract the test name
            test_name=$(echo "$line" | sed -E 's/\[xUnit.net.*\]     (.*) \[FAIL\]/\1/')
            echo "Test name: $test_name"  # Debugging line

            # Extract the error message and expected/actual values
            error_message=$(grep -A 3 "$test_name" test_log.txt | grep "Error Message" | sed -E 's/Error Message: (.*)/\1/')
            expected=$(grep -A 3 "$test_name" test_log.txt | grep "Expected" | sed -E 's/Expected: (.*)/\1/')
            actual=$(grep -A 3 "$test_name" test_log.txt | grep "Actual" | sed -E 's/Actual: (.*)/\1/')
            
            # Append the formatted details to the formatted_comment variable
            formatted_comment+=$'\n#### Test: '"$test_name"$'\n'
            formatted_comment+="Error Message: $error_message"$'\n'
            formatted_comment+="Expected: $expected"$'\n'
            formatted_comment+="Actual: $actual"$'\n'
          done

          # Set the formatted comment as an output
          echo "::set-output name=comment::$formatted_comment"

      - name: Comment on Pull Request
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: ${{ steps.format-comment.outputs.comment }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
