name: PR Test Failure Reporter

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

jobs:
  test-and-report:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
          
      - name: Run Tests and Generate xUnit Results
        id: run-tests
        run: |
          mkdir -p test_results
          # Run tests and capture both standard output and errors into a log file
          dotnet test KraftKollen/KraftKollen.Tests/KraftKollen.Tests.csproj --logger "xunit;LogFileName=test_results/results.xml" > test_results/test_log.txt 2>&1
        continue-on-error: true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test_results
 
  add-comment-to-pr:
    runs-on: ubuntu-latest
    needs: test-and-report
    permissions:
      pull-requests: write  # Grant permission to write comments to pull requests
      contents: read        # Grant permission to read the repository's contents (if required)

    
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: test-results

      - name: List Artifact Contents
        run: |
          echo "Listing contents of the current directory:"
          ls -alh  # List contents of the current directory to see if test_results is there

      - name: View Contents of test_log.txt
        run: |
          echo "Displaying contents of test_log.txt:"
          cat test_log.txt  # Replace with the actual path to your txt file in the artifact
    
      - name: Extract and Format Test Failures
        id: format-comment
        run: |
          echo "Extracting test failures..."

          # Initialize an empty string to store formatted failures
          formatted_comment="### ‚ùå Test Failures Summary\n"
          
          # Start processing the log file with awk
          awk '
            # Look for lines starting with "[xUnit.net" that indicate a test failure
            /^\[xUnit.net.*FAIL\]/ {
              # Start capturing the failure block
              in_failure_block = 1
              test_name = substr($0, index($0, "]") + 2)
              formatted_failure = "#### Test: " test_name "\n"
            }
          
            # Capture all lines while we are inside a failure block
            in_failure_block {
              # Append the line to the formatted failure block
              formatted_failure = formatted_failure $0 "\n"
              
              # Check if we have found the second (pos <number>) line
              if ($0 ~ /\(pos [0-9]+\)/) {
                if (++count == 2) {
                  in_failure_block = 0
                  # Store the formatted failure block
                  print formatted_failure
                }
              }
            }
          ' test_log.txt | while read -r line; do
            # If we have a formatted failure block, capture it and format it into the final comment
            formatted_comment+="$line"
          done
          
          # Set the formatted comment as an output
          echo "::set-output name=comment::$formatted_comment"

      - name: Comment on Pull Request
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: ${{ steps.format-comment.outputs.comment }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
