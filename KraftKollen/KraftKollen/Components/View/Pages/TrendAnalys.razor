@rendermode InteractiveServer
@page "/TrendAnalys"
@using KraftKollen.Helpers.Interfaces
@using KraftKollen.Models
@using KraftKollen.Repository
@using KraftKollen.Repository.Models
@inject IApiService apiService
@inject ITrendCalculator trendCalculator

<link href="custom.css" rel="stylesheet" />

<div class="centered-content">
    <div class="text-box">
        <h3>Trendanalys för vindkraft</h3>

        <div>
            <label for="region">Välj region:</label>
            <select id="region" @bind="selectedRegionId">
                @foreach (var region in regions)
                {
                    <option value="@region.Id">@region.Name</option>
                }
            </select>
        </div>

        <div>
            <label for="yearRange">Välj år:</label>
            <div class="year-range">
                <select id="startYear" @bind="startYear">
                    @foreach (var year in availableYears)
                    {
                        <option value="@year">@year</option>
                    }
                </select>
                <select id="endYear" @bind="endYear">
                    @foreach (var year in availableYears.Where(year => year >= startYear))
                    {
                        <option value="@year">@year</option>
                    }
                </select>
            </div>
        </div>

        <button class="custom-button" @onclick="LoadData">Hämta data</button>

        @if (trendData != null)
        {
            <div>
                <h4> @(trendResult)</h4>
                <ul>
                    @foreach (var value in trendData)
                    {
                        <li>År: @value.Period, Värde: @string.Join(", ", value.Value) Mw/h</li>
                    }
                </ul>
            </div>
        }
        else
        {
            <p>Ingen data att visa</p>
        }
    </div>
</div>


@code {
    private List<Region> regions = AllRegions.GetAllRegions();
    private string selectedRegionId = "0021"; // Default to Gävleborg
    private List<int> availableYears = Enumerable.Range(2012, DateTime.Now.Year - 2012).ToList();
    private int startYear = 2012;
    private int endYear = 2023;
    private List<WindPowerProduction> trendData = new List<WindPowerProduction>();
    private string trendResult;

    private async Task LoadData()
    {
        trendData.Clear();

        // Check if the start and end years are the same, which is invalid
        if (startYear == endYear)
        {
            trendResult = "Startyear och endyear kan inte vara samma, kan inte hitta trend.";
            return;
        }
        try
        {

            for (int year = startYear; year <= endYear; year++)
            {
                var data = await apiService.GetWindPowerProduction(selectedRegionId, year.ToString());

                if (data.Value != null)
                {
                    trendData.Add(data);
                }

            }

            // Check to see if we got any data
            if (trendData.Any())
            {
                trendResult = trendCalculator.CalculateTrend(trendData);
            }
            else
            {
                trendResult = "Ingen data hittades.";
            }
        }
        catch (Exception ex)
        {
            trendResult = $"Error: {ex.Message}";
        }

    }



}
