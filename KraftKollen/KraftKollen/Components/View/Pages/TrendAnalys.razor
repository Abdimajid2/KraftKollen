@rendermode InteractiveServer
@page "/TrendAnalys"
@using KraftKollen.Models
@using KraftKollen.Repository
@using KraftKollen.Repository.Models
@inject IApiService apiService

<h3>Trendanalys för Vindkraft</h3>

<div>
    <label for="region">Välj region:</label>
    <select id="region" @bind="selectedRegionId">
        @foreach (var region in regions)
        {
            <option value="@region.Id">@region.Name</option>
        }
    </select>

    <label for="yearRange">Välj år:</label>
    <select id="startYear" @bind="startYear">
        @foreach (var year in availableYears)
        {
            <option value="@year">@year</option>
        }
    </select>
    <select id="endYear" @bind="endYear">
        @foreach (var year in availableYears)
        {
            <option value="@year">@year</option>
        }
    </select>

    <button @onclick="LoadData">Ladda Data</button>
</div>

<div>
    @if (loading)
    {
        <p>Laddar...</p>
    }
    else if (trendData != null)
    {
        <h4>Trend: @(trendResult)</h4>
        <ul>
            @foreach (var value in trendData)
            {
                <li>År: @value.Period, Värde: @string.Join(", ", value.Value) Mw/h</li>



            }
        </ul>
    }
    else
    {
        <p>Ingen data att visa</p>
    }
</div>

@code {
    private List<Region> regions = AllRegions.GetAllRegions();
    private string selectedRegionId = "0001"; // Default till Stockholm
    private List<int> availableYears = Enumerable.Range(2000, DateTime.Now.Year - 1999).ToList();
    private int startYear = 2020;
    private int endYear = 2023;
    private bool loading = false;
    private List<WindPowerProduction> trendData = new List<WindPowerProduction>();
    private string trendResult;

    private async Task LoadData()
    {
        loading = true;
        trendData.Clear();

        try
        {
            // Iterera över varje år i det valda intervallet
            for (int year = startYear; year <= endYear; year++)
            {
                var data = await apiService.GetWindPowerProduction(selectedRegionId, year.ToString());

                if (data.Value != null)
                {
                    trendData.Add(data);
                }

                // string apiUrl = $"http://api.kolada.se/v2/data/kpi/N45904/municipality/{selectedRegionId}/year/{year}";

                // Console.WriteLine($"API URL: {apiUrl}");

                // var response = await Http.GetFromJsonAsync<WindPowerProductionDTO>(apiUrl);

                // if (response?.values != null)
                // {
                //     trendData.AddRange(response.values.Where(v => v.period == year));
                // }
            }

            // Kontrollera om vi fick någon data
            if (trendData.Any())
            {
                trendResult = CalculateTrend(trendData);
            }
            else
            {
                trendResult = "Ingen data hittades för valt intervall.";
            }
        }
        catch (Exception ex)
        {
            trendResult = $"Fel: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }


    private string CalculateTrend(List<WindPowerProduction> data)
    {
        if (data.Count < 2)
        {
            return "Inte tillräckligt med data för att beräkna en trend.";
        }

        var sortedData = data.OrderBy(d => d.Period).ToList();

        var firstValue = sortedData.First().Value;
        var lastValue = sortedData.Last().Value;

        if (lastValue > firstValue)
        {
            return "Trenden går uppåt.";
        }
        else if (lastValue < firstValue)
        {
            return "Trenden går nedåt.";
        }
        else
        {
            return "Trenden är oförändrad.";
        }
    }

}
