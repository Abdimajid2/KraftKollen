@page "/AverageProduction"
@using KraftKollen.Repository
@using KraftKollen.Helpers.Interfaces
@using KraftKollen.Components.Components
@using KraftKollen.Helpers
@rendermode InteractiveServer
@inject IApiService ApiService
@inject IAverageProduction Average

<h3>AverageProduction</h3>
<GetDataByRegionComponent OnRegionsSelected="UpdateRegion"></GetDataByRegionComponent>
<GetTwoYearsComponent OnTwoYearsSelected="UpdateYears"></GetTwoYearsComponent>

@if (averageProduction > 0)
{
    <p>
        Medelvärde under åren  @selectedYears.Item1 och @selectedYears.Item2 är @averageProduction MWh

    </p>
}
else
{
    <p>@erromessage</p>
}

@code {
    private string selectedRegion;
    private (int, int) selectedYears;
    private double averageProduction; // för att beräkna medelvärde
    private string erromessage = string.Empty;

    private async Task CalculateAverageProduction()
    {
        if (string.IsNullOrEmpty(selectedRegion) || selectedYears == default)
        {
            averageProduction = 0;
            return;
        }
        
        //måste generera alla åren i mellan
        var years = Enumerable.Range(selectedYears.Item1, selectedYears.Item2 - selectedYears.Item1 + 1)
            .Select(y => y.ToString())
            .ToList();
    
        try
        {
            averageProduction = await Average.ProductionForYears(selectedRegion, years);
            if (averageProduction > 0)
            {
                erromessage = string.Empty;
            }

            {
                erromessage = "inget data för dessa år";
            }
        }
        catch (Exception e)
        {
            erromessage = "det gick ej att hämta data för dessa år";
            averageProduction = 0;
        }
    }

    private async Task UpdateRegion(string Region)
    {
        selectedRegion = Region;
        await CalculateAverageProduction();
    }

    private async Task UpdateYears((int, int) years)
    {
        selectedYears = years;

        await CalculateAverageProduction();
    }

}