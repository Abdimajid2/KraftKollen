@page "/AverageProduction"
@using KraftKollen.Repository
@using KraftKollen.Helpers.Interfaces
@using KraftKollen.Components.Components
@using KraftKollen.Helpers
@rendermode InteractiveServer
@inject IApiService ApiService
@inject IAverageProduction Average

<h3>MedelVärdet</h3>
<div class="container">
    <div class="component">
        <GetDataByRegionComponent OnRegionsSelected="UpdateRegion"></GetDataByRegionComponent>
    </div>
    <div class="component">
        <GetTwoYearsComponent OnTwoYearsSelected="UpdateYears"></GetTwoYearsComponent>
    </div>
    @if (averageProduction > 0)
    {
        <p>
            Medelvärde under åren  @selectedYears.Item1 och @selectedYears.Item2 är @averageProduction MWh
        </p>
    }
    else
    {
        <p class="error-message">@erromessage</p>
    }
</div>

@code {
    private string selectedRegion;
    private (int, int) selectedYears;
    private double averageProduction; // för att beräkna medelvärde
    private string erromessage = string.Empty;

    private async Task CalculateAverageProduction()
    {
        if (string.IsNullOrEmpty(selectedRegion) || selectedYears == default)
        {
            averageProduction = 0;
            return;
        }
        
        //måste generera alla åren i mellan
        var years = Enumerable.Range(selectedYears.Item1, selectedYears.Item2 - selectedYears.Item1 + 1)
            .Select(y => y.ToString())
            .ToList();
    
        try
        {
            averageProduction = await Average.ProductionForYears(selectedRegion, years);
            if (averageProduction > 0)
            {
                erromessage = string.Empty;
            }

            {
                erromessage = "inget data för dessa år";
            }
        }
        catch (Exception e)
        {
            erromessage = "det gick ej att hämta data för dessa år";
            averageProduction = 0;
        }
    }

    private async Task UpdateRegion(string Region)
    {
        selectedRegion = Region;
        await CalculateAverageProduction();
    }

    private async Task UpdateYears((int, int) years)
    {
        selectedYears = years;

        await CalculateAverageProduction();
    }
}
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
        color: #333;
    }

    h3 {
        color: #0056b3;
        text-align: center;
        margin-top: 20px;
        font-size: 1.8rem;
    }

  
    .container {
        max-width: 600px;
        margin: 20px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    p {
        font-size: 1rem;
        line-height: 1.5;
        text-align: center;
        color: #444;
    }

    .error-message {
        color: red;
        font-weight: bold;
        text-align: center;
    }

 
    .component {
        margin-bottom: 20px;
    }

  
    button {
        background-color: #0056b3;
        color: #fff;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        margin-top: 10px;
    }

    button:hover {
        background-color: #003d80;
    }

    input[type="text"], select {
        width: calc(100% - 20px);
        padding: 10px;
        margin: 10px 0;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 1rem;
    }
</style>