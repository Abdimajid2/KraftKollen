@page "/AverageProduction"
@using KraftKollen.Repository
@using KraftKollen.Helpers.Interfaces
@using KraftKollen.Components.Components
@using KraftKollen.Helpers
@rendermode InteractiveServer
@inject IApiService ApiService
@inject IAverageProduction Average
<link href="custom.css" rel="stylesheet"/>

<div class="centered-content">
    <div class="text-box">
        <h3>MedelVärdet</h3>
        <div class="component">
            <GetDataByRegionComponent OnRegionsSelected="UpdateRegion"></GetDataByRegionComponent>
        </div>
        <div class="component">
            <GetTwoYearsComponent OnTwoYearsSelected="UpdateYears"></GetTwoYearsComponent>
        </div>
        @if (averageProduction > 0)
        {
            <p>
                Medelvärde under åren @selectedYears.Item1 och @selectedYears.Item2 är <span style="text-decoration: underline;">@averageProduction MWh</span>
            </p>
        }
        else
        {
            <p class="error-message">@erromessage</p>
        }
    </div>
</div>
@code {
    private string selectedRegion;
    private (int, int) selectedYears;
    private double averageProduction; // för att beräkna medelvärde
    private string erromessage = string.Empty;

    private async Task CalculateAverageProduction()
    {
        if (string.IsNullOrEmpty(selectedRegion) || selectedYears == default)
        {
            averageProduction = 0;
            return;
        }
        
        //måste generera alla åren i mellan
        var years = Enumerable.Range(selectedYears.Item1, selectedYears.Item2 - selectedYears.Item1 + 1)
            .Select(y => y.ToString())
            .ToList();
    
        try
        {
            averageProduction = await Average.ProductionForYears(selectedRegion, years);
            if (averageProduction > 0)
            {
                erromessage = string.Empty;
            }

            {
                erromessage = "inget data för dessa år";
            }
        }
        catch (Exception e)
        {
            erromessage = "det gick ej att hämta data för dessa år";
            averageProduction = 0;
        }
    }

    private async Task UpdateRegion(string Region)
    {
        selectedRegion = Region;
        await CalculateAverageProduction();
    }

    private async Task UpdateYears((int, int) years)
    {
        selectedYears = years;

        await CalculateAverageProduction();
    }
}