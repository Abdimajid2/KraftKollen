@rendermode InteractiveServer
@using KraftKollen.Components.Components
@using KraftKollen.Models
@using KraftKollen.Repository
@using KraftKollen.Repository.Models
@using KraftKollen.Helpers.Interfaces
@inject IApiService apiService



@page "/WindPowerPerYear"


    <h3>Elproduktion per år</h3> 

    <select @bind="selectedYearOne">
        <option disabled value="0">-- Välj ett år --</option>
       
        @foreach (var year in years)
        {
        <option value="@year">@year</option>
        }
    </select>

    <select @bind="selectedYearTwo">
    <option disabled value="0">-- Välj ett år --</option>

    @foreach (var year in years)
    {
        <option value="@year">@year</option>
    }
    </select>

    <button @onclick="FetchTotalProduction">Hämta data</button>

    @if (totalProductionYearOne > 0 && totalProductionYearTwo > 0)
    {
        <h5 style="margin-top: 20px;">Total elproduktion från våra 21 regioners vindkraftverk. </h5>
        <p>År: @selectedYearOne: @totalProductionYearOne Mwh (@(CalculateResultInGigaWatt(totalProductionYearOne)) Gwh)</p>
        <p>År: @selectedYearTwo: @totalProductionYearTwo Mwh (@(CalculateResultInGigaWatt(totalProductionYearTwo)) Gwh).</p>
        <p>Skillnad i produktion mellan åren: @productionDifference Mwh (@(CalculateResultInGigaWatt(productionDifference)) Gwh)</p>    
    }  

@code {

    private List<int> years = new List<int> { 2019, 2020, 2021, 2022 };

    private int selectedYearOne;
    private int selectedYearTwo;
    private double totalProductionYearOne;
    private double totalProductionYearTwo;    
    private double productionDifference; 
    
    [Inject]
    private ICalculateProductionDifference CalculateProductionDifference { get; set; } //Behöver ett interface för att fungera  av  den isolerade klassen med metoden som ska testas.
       
    private async Task FetchTotalProduction() // Hämtar total produktion från region och år
    {
        if (selectedYearOne == 0 || selectedYearTwo == 0)
        {
            // Om inget av �ren valts
            totalProductionYearOne = selectedYearOne == 0 ? 0 : totalProductionYearOne;
            totalProductionYearTwo = selectedYearTwo == 0 ? 0 : totalProductionYearTwo;
            return;
        }

        // Visa om båda åren valts
        totalProductionYearOne = await CalculateTotalProductionForYear(selectedYearOne);
        totalProductionYearTwo = await CalculateTotalProductionForYear(selectedYearTwo);

        // Beräknar skillnaden av produktion
        productionDifference = CalculateProductionDifference.CalculateDifference(totalProductionYearOne, totalProductionYearTwo);
    }

    // Beräkna totalproduktion per år
    private async Task<double> CalculateTotalProductionForYear(int year)
    {
        double total = 0;
        var regions = AllRegions.GetAllRegions();

        foreach (var region in regions)
        {
            try
            {
                // Hämta data för regionen och året
                var production = await GetWindPowerProduction(region.Id, year.ToString());

                if (production.Value != null)
                {
                    total += (double)production.Value;
                }               
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Fel vid hämtning av {region.Name}: {ex.Message}");
            }
        }

        return total;
    }

    private double CalculateResultInGigaWatt(double value) // Beräknar Mwh till Ghw
    {
        return value / 1000;
    }    

    public async Task<WindPowerProduction> GetWindPowerProduction(string regionId, string year)
    {
        var windpower = await apiService.GetWindPowerProduction(regionId, year);
        return windpower;
    }
}