@rendermode InteractiveServer
@using KraftKollen.Components.Components
@using KraftKollen.Models
@using KraftKollen.Repository
@using KraftKollen.Repository.Models
@using KraftKollen.Helpers.Interfaces
@inject ICalculateResultsInGwhAndTwh calculateGwhAndTwh 
@inject IApiService apiService

@page "/WindPowerPerYear"

<link href="custom.css" rel="stylesheet" />

<div class="centered-content">
    <div class="text-box">

        <h3>Elproduktion per år</h3> 

        <select @bind="selectedYearOne">
            <option disabled value="0">-- Välj ett år --</option>
       
            @foreach (var year in years)
            {
            <option value="@year">@year</option>
            }
        </select>

        <select @bind="selectedYearTwo">
        <option disabled value="0">-- Välj ett år --</option>

        @foreach (var year in years)
        {
            <option value="@year">@year</option>
        }
        </select>

        <button class="custom-button" @onclick="FetchTotalProduction">Hämta data</button>

        @if (totalProductionYearOne > 0 && totalProductionYearTwo > 0)
        {
            <h5 style="margin-top: 20px;">Total elproduktion från våra 21 regioners vindkraftverk. </h5>
            <p>År @selectedYearOne: <span style="text-decoration: underline;"> @totalProductionYearOne Mwh</span> @(calculateGwhAndTwh.CalculateResultsInGwhTwH(totalProductionYearOne))</p>
            <p>År @selectedYearTwo: <span style="text-decoration: underline;"> @totalProductionYearTwo Mwh</span> @(calculateGwhAndTwh.CalculateResultsInGwhTwH(totalProductionYearTwo))</p>
            <p>Skillnad i produktion mellan åren: <span style="text-decoration: underline;"> @productionDifference Mwh</span> @(calculateGwhAndTwh.CalculateResultsInGwhTwH(productionDifference))</p>
        } 
     </div>
  </div>

@code {

    private List<int> years = new List<int> { 2019, 2020, 2021, 2022 };

    private int selectedYearOne;
    private int selectedYearTwo;
    private double totalProductionYearOne;
    private double totalProductionYearTwo;    
    private double productionDifference; 

    [Inject]
    private ICalculateProductionDifference CalculateProductionDifference { get; set; } //Needs an interface to function of the isolated class with the method to be tested.

    private async Task FetchTotalProduction() // Show total production from region and year.
    {
        if (selectedYearOne == 0 || selectedYearTwo == 0)
        {
            // If none of these yeasr are selected
            totalProductionYearOne = selectedYearOne == 0 ? 0 : totalProductionYearOne;
            totalProductionYearTwo = selectedYearTwo == 0 ? 0 : totalProductionYearTwo;
            return;
        }

        // Show if both years are selected
        totalProductionYearOne = await CalculateTotalProductionForYear(selectedYearOne);
        totalProductionYearTwo = await CalculateTotalProductionForYear(selectedYearTwo);

        // Difference of production
        productionDifference = CalculateProductionDifference.CalculateDifference(totalProductionYearOne, totalProductionYearTwo);
    }

    // Calculates the total production of electricity per region and year.
    private async Task<double> CalculateTotalProductionForYear(int year)
    {
        double total = 0;
        var regions = AllRegions.GetAllRegions();

        foreach (var region in regions)
        {
            try
            {
                // Download data for the region and the year.
                var production = await GetWindPowerProduction(region.Id, year.ToString());

                if (production.Value != null)
                {
                    total += (double)production.Value;
                }               
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Fel vid hämtning av {region.Name}: {ex.Message}");
            }
        }

        return total;
    }     

    public async Task<WindPowerProduction> GetWindPowerProduction(string regionId, string year) // Fetch wind production per region and year.
    {
        var windpower = await apiService.GetWindPowerProduction(regionId, year);
        return windpower;
    }
}