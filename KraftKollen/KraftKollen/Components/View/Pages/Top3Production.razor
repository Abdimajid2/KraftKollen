@rendermode InteractiveServer
@page "/TopProductionYears"
@using KraftKollen.Helpers.Interfaces
@using KraftKollen.Models
@using KraftKollen.Repository
@inject IApiService apiService
@inject ITopProduction productionAnalyzer

<link href="custom.css" rel="stylesheet" />

<div class="centered-content">
    <div class="text-box">
        <h3>Topp 3 Produktionsår för Vindkraft</h3>

        <div>
            <label for="region">Välj region:</label>
            <select id="region" @bind="selectedRegionId">
                @foreach (var region in regions)
                {
                    <option value="@region.Id">@region.Name</option>
                }
            </select>
        </div>

        <div>
            <label for="yearRange">Välj år:</label>
            <div class="year-range">
                <select id="startYear" @bind="startYear">
                    @foreach (var year in availableYears)
                    {
                        <option value="@year">@year</option>
                    }
                </select>
                <select id="endYear" @bind="endYear">
                    @foreach (var year in availableYears.Where(year => year >= startYear))
                    {
                        <option value="@year">@year</option>
                    }
                </select>
            </div>
        </div>

        @if (startYear == endYear)
        {
            <p class="error-message">Startår och slutår kan inte vara samma!</p>
        }

        <button class="custom-button" @onclick="LoadTopProductionYears">Hämta Topp 3</button>

        @if (topYears != null && topYears.Any())
        {
            <div>
                <h4>De tre år med högst produktion:</h4>
                <ol>
                    @foreach (var year in topYears)
                    {
                        <li>År: @year.Year, Produktion: @year.Production Mw/h</li>
                    }
                </ol>
            </div>
        }
        else if (topYears != null)
        {
            <p>Ingen data att visa</p>
        }
    </div>
</div>

@code {
    private List<Region> regions = AllRegions.GetAllRegions();
    private string selectedRegionId = "0021"; // Default to Gävleborg
    private List<int> availableYears = Enumerable.Range(2012, DateTime.Now.Year - 2011).ToList();
    private int startYear = 2012;
    private int endYear = 2023;
    private List<(int Year, double Production)> topYears = new();

    private async Task LoadTopProductionYears()
    {
        // Check if startYear and endYear are the same
        if (startYear == endYear)
        {
            Console.WriteLine("Startår och slutår kan inte vara samma.");
            return;
        }

        topYears.Clear();

        try
        {
            var productionData = new List<WindPowerProduction>();

            for (int year = startYear; year <= endYear; year++)
            {
                var data = await apiService.GetWindPowerProduction(selectedRegionId, year.ToString());
                if (data.Value != null)
                {
                    productionData.Add(data);
                }
            }

            if (productionData.Any())
            {
                topYears = productionAnalyzer.GetTopProductionYears(productionData);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
