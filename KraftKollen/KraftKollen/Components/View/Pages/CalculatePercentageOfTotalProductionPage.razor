@page "/CalculatePercentageOfTotalProductionPage"
@rendermode InteractiveServer
@using KraftKollen.Helpers
@using KraftKollen.Components.Components
@inject ICalculateProcentage calculateProcentage
 <link href="custom.css" rel="stylesheet"/>
<div class="centered-content">
    <div class="text-box">
        <h3>Vindkraftens andel av total produktion</h3>
        <div class="component">
            <GetDataByRegionComponent OnRegionsSelected="UpdateRegion"></GetDataByRegionComponent>
        </div>
        <div class="component">
            <GetDataByYearComponent OnYearSelected="UpdateYears"></GetDataByYearComponent>
        </div>
        @if (Percentage.HasValue)
        {
            <p>
                Vindkraften står för <span style="text-decoration: underline;">@(Percentage?.ToString("F1"))%</span> av den totala elproduktionen under året @year.
            </p>
        }
        else
        {
            <p class="error-message">@errormessage</p>
        }
    </div>
</div>
 
@code {
    private string regionId;
    private string year;
    private double? Percentage;
    private string errormessage;
    
    private async Task UpdateRegion(string Region)
    {
        regionId = Region;
        await CalculatePercentage();
    }

    private async Task UpdateYears( string years)
    {
        year = years;
        await CalculatePercentage();
    }

    private async Task CalculatePercentage()
    {
        try
        {
            if (string.IsNullOrEmpty(regionId) || string.IsNullOrEmpty(year))
            {
                errormessage = "Region och år måste väljas.";
                Percentage = null;
                return;
            }

            Percentage = await calculateProcentage.CalculateProcentageOfTotalProduction(regionId, year);
            var test = 45;
            errormessage = string.Empty;
        }
        catch (Exception e)
        {
            errormessage = $"Ett fel uppstod: {e.Message}";
            Percentage = null;
        }
    }
}
