@rendermode InteractiveServer

@page "/"
@using KraftKollen.Repository
@using KraftKollen.Repository.Models
@using KraftKollen.Components.Components
@using KraftKollen.Components.Layout
@inject IApiService ApiService 
@if (test != null)
{

     @foreach (var value in test.values)
     {
         <p>@value.kpi</p>
         <p>kommun id: @value.municipality</p>
         <p>år:  @value.period</p>
         if (value.values != null)
         {
             @foreach(var val in value.values)
             {
                 <p>@val.count</p>
                 <p>@val.gender</p>
                 <p>@val.status</p>
                 <p>hur mycket el som producerats: @val.value</p>
             }
         }
     }

    @foreach (var value in test.values)
    {
        <p>@value.kpi</p>
        <p>kommun id: @value.municipality</p>
        <p>år: @value.period</p>
        if (value.values != null)
        {
            @foreach (var val in value.values)
            {
                <p>@val.count</p>
                <p>@val.gender</p>
                <p>@val.status</p>
                <p>hur mycket el producerats: @val.value</p>
            }
        }
    }

}
<GetDataByYearComponent OnYearSelected="UpdateYear"></GetDataByYearComponent>
<GetDataByRegionComponent OnRegionsSelected="UpdateRegion"></GetDataByRegionComponent>
<SelectAllRegionsComponent OnAllRegionsSelected="UpdateRegions"></SelectAllRegionsComponent>
 <SelectMultipleRegions OnRegionsSelected="HandleSelectedRegions"></SelectMultipleRegions>
<p>ID på regionen: @region</p>
<p>Valt år: @year </p>

@code
{
    private string? region;
    private string? year;
    private WindPowerProductionDTO test;

    private async Task HandleSelectedRegions(List<string> selectedRegions)
    {
        region = string.Join(", ", selectedRegions);
        await FetchWindPowerData();
    }
    
    
    private async Task UpdateRegion(string selectedRegions)
    {
        region = selectedRegions;
        await FetchWindPowerData();
    }
    
    private async Task UpdateRegions(List<string> selectedRegions)
    {
         
        region = string.Join(", ", selectedRegions);
        await FetchWindPowerData();
    }
     
 
    private async Task UpdateYear(string selectedYear)
    {
        year = selectedYear;
        await FetchWindPowerData();
    }

    private async Task<bool> CheckIfValid()
    {
        if (string.IsNullOrEmpty(region) || string.IsNullOrEmpty(year))
        {
            return false;
        }

        return true;
    }

    private async Task FetchWindPowerData()
    {
        var result = await CheckIfValid();
        if (!result )
        {
            return;
        }

        try
        {
            test = await ApiService.GetWindPowerProduction(region, year);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }


    protected override async Task OnInitializedAsync()
    {
        
        await FetchWindPowerData();
    }
}