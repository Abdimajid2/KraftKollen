@rendermode InteractiveServer

@page "/CompareTwoRegionsOutputView"

@using KraftKollen.Components.Components
@using KraftKollen.Helpers.Interfaces
@using KraftKollen.Models
@using KraftKollen.Repository
@using KraftKollen.Repository.Models

@inject IApiService ApiService
@inject IYearComparisonIndicator yearComparisonIndicator

<h3>CompareTwoRegionsOutputView</h3>

<GetTwoYearsComponent OnTwoYearsSelected="GetYearsAsync" />

<div class="container">
    @if (_firstYearLargestValue != null)
    {
        <div>
            <h3>@_firstYearLargestValue.Year</h3>
            <p>@_firstYearLargestValue.Name: @_firstYearLargestValue.Value MWh</p>
        </div>
    }

    @* TODO: These are not null since they are initialized as new() *@
    
    @if (_firstYearLargestValue != null && _secondYearLargestValue != null)
    {
        
        // Returns a string depending on if any value is greater than the other
        var arrow = yearComparisonIndicator.GetYearComparisonIndicator(_firstYearLargestValue.Value, _secondYearLargestValue.Value);
        <div data-testid="comparison-symbol">
        @switch (arrow)
        {
            case "Left":
                <h3 data-testid="left-arrow" class="alert-danger"> &larr; </h3>
                break;

            case "Equal":
                <h3 data-testid="equal" class="alert-info"> &equals; </h3>
                break;
            case "Right":
                <h3 data-testid="right-arrow" class="alert-success"> &rarr; </h3>
                break;
            default:
                <h3> Could not validate data </h3>
                break;
        }
        </div>
    }

    @if (_secondYearLargestValue?.Value != null)
    {
        <div>
            <h3>@_secondYearLargestValue.Year</h3>
            <p>@_secondYearLargestValue.Name: @_secondYearLargestValue.Value MWh</p>
        </div>
    }
</div>

@code {
    private List<Region> regions = AllRegions.GetAllRegions();

    private RegionWithValue? _firstYearLargestValue;
    private RegionWithValue? _secondYearLargestValue;

    // The method executes when the GetTwoYearsComponent triggers a callback
    private async Task GetYearsAsync((int, int) selectedTwoYears)
    {
        var firstYear = selectedTwoYears.Item1.ToString();
        var secondYear = selectedTwoYears.Item2.ToString();


        _firstYearLargestValue = await GetLargestValueAsync(firstYear);
        _secondYearLargestValue = await GetLargestValueAsync(secondYear);
    }

    private async Task<RegionWithValue> GetLargestValueAsync(string year)
    {
        RegionWithValue currentLargestValue = new() { Year = year, Value = 0 };

        foreach (var region in regions)
        {
            // Compares the new region with the old and returns the one that has the highest value
            currentLargestValue = await TryUpdateLargestValueAsync(currentLargestValue, region.Id);
        }

        return currentLargestValue;
    }

    private async Task<RegionWithValue> TryUpdateLargestValueAsync(RegionWithValue regionWithLargestValue, string id)
    {
        var zeroAsString = "0";
        var year = regionWithLargestValue.Year;
        var previousValue = regionWithLargestValue.Value;
        RegionWithValue updatedRegion = new();


        if (regionWithLargestValue.Year != zeroAsString)
        {
            // Calls Api Service to get the value of a region a specific year
            var result = await FetchWindPowerDataAsync(id, year);
            if (result.Value > previousValue && result.Value != null)
            {
                // If the value of the new region is greater than the currently largest, it assigns the new values
                updatedRegion = new()
                {
                    Value = result.Value,
                    Year = regionWithLargestValue.Year,
                    Id = id,
                    Name = regions.FirstOrDefault(n => n.Id == id)?.Name ?? "Could not get name"
                };
            }
        }

        // The first time this is run the updatedRegion.Value is null this checks that and returns the largest value
        if (updatedRegion.Value != null && updatedRegion.Value > regionWithLargestValue.Value)
        {
            return updatedRegion;
        }
        else
        {
            return regionWithLargestValue;
        }

    }

    private bool IsValidInput(string region, string year)
    {
        if (string.IsNullOrEmpty(region) || string.IsNullOrEmpty(year))
        {
            return false;
        }

        return true;
    }

    private async Task<WindPowerProduction> FetchWindPowerDataAsync(string region, string year)
    {
        var result = IsValidInput(region, year);
        if (!result)
        {
            return new();
        }

        try
        {
            return await ApiService.GetWindPowerProduction(region, year);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
            return new();
        }
    }

    
}


<style>
    .container {
        display: flex;
        gap: 16px; /* Adds space between the divs */
    }

        .container > div {
            border: 1px solid #ccc; /* Optional: Add a border for visual distinction */
            padding: 8px;
            flex: 1; /* Optional: Make the divs equal in width */
        }
</style>
