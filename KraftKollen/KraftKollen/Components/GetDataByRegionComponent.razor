@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components
<h3>Select a Region</h3>

<select value="@selectedRegion" @onchange="(e => Update(e))">

    @foreach (var region in regions)
    {
    <option value="@region.Id">@region.Name</option>
    }
</select>
 

@code {
    [Parameter] public bool SelectAll { get; set; }
    [Parameter] public EventCallback<string> OnRegionsSelected { get; set; }
    private string selectedRegion;
    
     private List<Region> regions = new List<Region>
    {
        new Region { Id = "0001", Name = "Region Stockholm" },
        new Region { Id = "0003", Name = "Region Uppsala" },
        new Region { Id = "0004", Name = "Region Sörmland" },
        new Region { Id = "0005", Name = "Region Östergötland" },
        new Region { Id = "0006", Name = "Region Jönköpings län" },
        new Region { Id = "0007", Name = "Region Kronoberg" },
        new Region { Id = "0008", Name = "Region Kalmar" },
        new Region { Id = "0009", Name = "Region Gotland" },
        new Region { Id = "0010", Name = "Region Blekinge" },
        new Region { Id = "0012", Name = "Region Skåne" },
        new Region { Id = "0013", Name = "Region Halland" },
        new Region { Id = "0014", Name = "Västra Götalandsregionen" },
        new Region { Id = "0017", Name = "Region Värmland" },
        new Region { Id = "0018", Name = "Region Örebro län" },
        new Region { Id = "0019", Name = "Region Västmanland" },
        new Region { Id = "0020", Name = "Region Dalarna" },
        new Region { Id = "0021", Name = "Region Gävleborg" },
        new Region { Id = "0022", Name = "Region Västernorrland" },
        new Region { Id = "0023", Name = "Region Jämtland Härjedalen" },
        new Region { Id = "0024", Name = "Region Västerbotten" },
        new Region { Id = "0025", Name = "Region Norrbotten" }
    };
    
    

    private async Task Update(ChangeEventArgs e)
    {
        selectedRegion = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedRegion))
        {
            await OnRegionsSelected.InvokeAsync(selectedRegion);
        }
    }
    
    public string GetRegionName(string regionId)
    {
        var region = regions.FirstOrDefault(r => r.Id == regionId);
        return region != null ? region.Name : "No region selected";
    }
    public class Region
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }

}